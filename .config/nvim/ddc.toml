[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_diagnostics_virtual_text_enabled = 0
  let g:lsp_document_code_action_signs_enabled = 0
  highlight LspWarningHighlight cterm=underline term=underline gui=underline
  highlight LspErrorHighlight cterm=underline term=underline gui=underline
  highlight LspInformationHighlight cterm=underline term=underline gui=underline
  highlight LspHintHighlight cterm=underline term=underline gui=underline
  function s:on_lsp_buffer_enabled() abort
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)
  endfunction
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'

[[plugins]]
repo = 'Shougo/ddc.vim'

[[plugins]]
repo = 'gamoutatsumi/ddc-sorter_ascii'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'

[[plugins]]
repo = 'gamoutatsumi/ddc-emoji'

[[plugins]]
repo = 'shun/ddc-vim-lsp'

[[multiple_plugins]]
plugins = [
  'ddc.vim', 'ddc-fuzzy', 'ddc-emoji', 'ddc-vim-lsp',
  'ddc-around', 'pum.vim', 'denops-popup-preview.vim',
  'neco-vim', 'lexima.vim', 'vim-vsnip', 'ddc-file',
  'vim-vsnip-integ', 'ddc-cmdline-history'
  'ddc-matcher_head', 'ddc-sorter_ascii'
]
hook_add = '''
  let g:lexima_map_escape = '<Plug>(lexima-escape)'
  let g:lexima_no_default_rules = v:true
  let g:vsnip_snippet_dir = join([$XDG_CONFIG_HOME, 'nvim', 'vsnip'], '/')

  function! PumInit() abort
    imap <silent><expr> <TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<TAB>'
    imap <silent><expr> <C-n> pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<C-n>'
    smap <silent><expr> <TAB> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<TAB>'
    imap <silent><expr> <S-TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-TAB>'
    imap <silent><expr> <C-p> pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<C-p>'
    smap <silent><expr> <S-TAB> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-TAB>'
    inoremap <silent><expr> <CR> pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : lexima#expand('<LT>CR>', 'i')
    imap <silent><expr> <Esc> pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<Plug>(lexima-escape)'

    autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
  endfunction

  function! s:ddcinit() abort
    call lexima#set_default_rules()
    call PumInit()
    call ddc#custom#patch_global('completionMenu', 'pum.vim')
    call ddc#custom#patch_global('backspaceCompletion', v:true)
    call ddc#custom#patch_global('autoCompleteEvents',
      \ ['InsertEnter', 'TextChangedI', 'TextChangedP'])
    call ddc#custom#patch_global('sources', ['vim-lsp', 'file', 'vsnip', 'emoji', 'around'])
    call ddc#custom#patch_buffer('filterParams', {
    \   'matcher_fuzzy': {'splitMode': 'word',}
    \ })
    call ddc#custom#patch_global('keywordPattern', '[a-zA-Z_:]\w*')
    call ddc#custom#patch_global('sourceOptions', {
    \ '_': { 'matchers': ['matcher_fuzzy'], 'sorters': ['sorter_fuzzy'], 'converters': ['converter_fuzzy'] },
    \ 'vim-lsp': { 'mark': 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*|"\w*', 'ignoreCase': v:true },
    \ 'around': {
    \   'mark': 'A',
    \   'isVolatile': v:true,
    \ },
    \ 'vsnip': {
    \   'mark': 'VS',
    \   'dup': v:true,
    \ },
    \ 'file': {
    \   'mark': 'F',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S/\S*',
    \   'matchers': ['matcher_head'],
    \   'sorters': [],
    \   'converters': [],
    \ },
    \ 'emoji': {
    \   'mark': 'emoji',
    \   'matchers': ['emoji'],
    \   'sorters': [],
    \   'converters': []
    \ },
    \ })

    call ddc#enable()
    call popup_preview#enable()
  endfunction

  function! CommandlinePre() abort
    let s:prev_buffer_config = ddc#custom#get_buffer()

    call ddc#custom#patch_buffer('sources', ['necovim', 'cmdline-history'])
    call ddc#custom#patch_buffer('autoCompleteEvents', ['CmdlineChanged'])
    call ddc#custom#patch_buffer('sourceOptions', {
    \ '_': {'matchers': ['matcher_head'], 'sorters': ['sorter_ascii']},
    \ 'necovim': {'mark': 'V', 'minAutoCompleteLength': 255, 'ignoreCase': v:true},
    \ 'cmdline-history': {'mark': 'history', 'minAutoCompleteLength': 255},
    \ })

    call ddc#enable_cmdline_completion()

    cmap <silent><expr> <TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : ddc#map#manual_complete(['necovim', 'cmdline-history'])
    cmap <silent><expr> <S-TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-h>'
    cmap <silent><expr> <CR> pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'

    autocmd CmdlineLeave * ++once call CommandlinePost()
  endfunction

  function! CommandlinePost() abort
    cunmap <TAB>
    cunmap <S-TAB>
    cunmap <CR>
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction

  "nnoremap : <Cmd>call CommandlinePre()<CR>:
  "nnoremap ; <Cmd>call CommandlinePre()<CR>:

  autocmd User DenopsReady call s:ddcinit()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
