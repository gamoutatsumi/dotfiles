[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'VimEnter'
hook_source = '''
  " lexima.vim
  let g:lexima_map_escape = '<Plug>(lexima-escape)'
  let g:lexima_no_default_rules = v:true
  call lexima#set_default_rules()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim', 'pum.vim', 'denops-popup-preview.vim', 'vim-vsnip-integ']
hook_source = '''
  " pum.vim
  imap <silent><expr> <TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<TAB>'
  imap <silent><expr> <C-n> pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<Cmd>call ddc#map#manual_complete()<CR><Cmd>call pum#map#select_relative(+1)<CR>'
  smap <silent><expr> <TAB> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<TAB>'
  imap <silent><expr> <S-TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-TAB>'
  imap <silent><expr> <C-p> pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<Cmd>call ddc#map#manual_complete()<CR><Cmd>call pum#map#select_relative(-1)<CR>'
  smap <silent><expr> <S-TAB> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-TAB>'
  inoremap <silent><expr> <CR> pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : lexima#expand('<LT>CR>', 'i')
  imap <silent><expr> <Esc> pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<Plug>(lexima-escape)'
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)

  " ddc.vim
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  call ddc#custom#patch_global('autoCompleteEvents',
    \ ['InsertEnter', 'TextChangedI', 'TextChangedP'])
  call ddc#custom#patch_global('sources', ['file', 'vsnip', 'emoji', 'around'])
  call ddc#custom#patch_global('keywordPattern', '[a-zA-Z_:]\w*')
  call ddc#custom#patch_global('filterParams', {
  \   'matcher_fuzzy': {'splitMode': 'word',}
  \ })
  call ddc#custom#patch_global('sourceOptions', {
  \ '_': { 'matchers': ['matcher_fuzzy'], 'sorters': ['sorter_fuzzy'], 'converters': ['converter_fuzzy'] },
  \ 'around': {
  \   'mark': 'A',
  \   'isVolatile': v:true,
  \ },
  \ 'vsnip': {
  \   'mark': 'VS',
  \   'dup': v:true,
  \ },
  \ 'file': {
  \   'mark': 'F',
  \   'isVolatile': v:true,
  \   'forceCompletionPattern': '\S/\S*',
  \   'matchers': ['matcher_head'],
  \   'sorters': ['sorter_ascii'],
  \   'converters': [],
  \ },
  \ 'emoji': {
  \   'mark': 'emoji',
  \   'matchers': ['emoji'],
  \   'sorters': [],
  \   'converters': []
  \ },
  \ })
  call ddc#enable()
  call popup_preview#enable()
'''
hook_add = '''
  function! CommandlinePre() abort
    let s:prev_buffer_config = ddc#custom#get_buffer()

    call ddc#custom#patch_buffer('sources', ['necovim', 'cmdline-history'])
    call ddc#custom#patch_buffer('autoCompleteEvents', ['CmdlineChanged'])
    call ddc#custom#patch_buffer('sourceOptions', {
    \ '_': {'matchers': ['matcher_head'], 'sorters': ['sorter_ascii']},
    \ 'necovim': {'mark': 'V', 'minAutoCompleteLength': 255, 'ignoreCase': v:true},
    \ 'cmdline-history': {'mark': 'history', 'minAutoCompleteLength': 255},
    \ })

    call ddc#enable_cmdline_completion()

    cmap <silent><expr> <TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' : ddc#map#manual_complete(['necovim', 'cmdline-history'])
    cmap <silent><expr> <S-TAB> pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<C-h>'
    cmap <silent><expr> <CR> pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'

    autocmd CmdlineLeave * ++once call CommandlinePost()
  endfunction

  function! CommandlinePost() abort
    cunmap <TAB>
    cunmap <S-TAB>
    cunmap <CR>
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction

  "nnoremap : <Cmd>call CommandlinePre()<CR>:
  "nnoremap ; <Cmd>call CommandlinePre()<CR>:
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = ['ddc.vim']

[[plugins]]
repo = 'gamoutatsumi/ddc-sorter_ascii'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = ['ddc.vim']

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = ['ddc.vim']

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = ['ddc.vim']

[[plugins]]
repo = 'gamoutatsumi/ddc-emoji'
on_source = ['ddc.vim']

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = ['ddc.vim']
hook_add = '''
  let g:vsnip_snippet_dir = join([$XDG_CONFIG_HOME, 'nvim', 'vsnip'], '/')
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_souce = ['ddc.vim']
