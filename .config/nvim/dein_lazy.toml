[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']

[[plugins]]
repo = 'sharat87/roast.vim'
on_ft = ['roast']

[[plugins]]
on_ft = ['tjs']
repo = 'vim-scripts/tjs.vim'

[[plugins]]
on_ft = ['rust']
repo = 'rust-lang/rust.vim'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform']

[[plugins]]
repo = 'segeljakt/vim-silicon'
on_cmd = ['Silicon']
hook_add = '''
  let g:silicon = {}
  let g:silicon['theme'] = 'Dracula'
  let g:silicon['font'] = 'HackGen'
  let g:silicon['background'] = '#AAAAFF'
  let g:silicon['shadow-color'] = '#555555'
  let g:silicon['line-pad'] = 2
  let g:silicon['pad-horiz'] = 80
  let g:silicon['pad-vert'] = 10
  let g:silicon['shadow-blur-radius'] = 0
  let g:silicon['shadow-offset-x'] = 0
  let g:silicon['shadow-offset-y'] = 0
  let g:silicon['line-number'] = v:true
  let g:silicon['round-corner'] = v:true
  let g:silicon['window-controls'] = v:true
  let g:silicon['output'] = '~/Pictures/silicon-{time:%Y-%m-%d-%H%M%S}.png'
'''

[[plugins]]
repo = 'mmisono/viminesweeper'
on_cmd = ['MineSweeper']

[[plugins]]
repo = 'skanehira/badapple.vim'
on_cmd = ['BadApple']

[[plugins]]
repo = 'bellflower2015/vim-syntax-tyranoscript'
on_ft = ['TyranoScript']

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown']

[[plugins]]
repo = 'koron/nyancat-vim'
on_cmd = ['Nyancat', 'Nyancat2']

[[plugins]]
repo = 'rhysd/vim-goyacc'
on_path = '*.go.y'

[[plugins]]
repo = 'qnighy/satysfi.vim'
on_path = '*.saty?h'

[[plugins]]
repo = 'jceb/vim-orgmode'
on_path = '*.org'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

# [[plugins]]
# repo = 'Shougo/denite.nvim'
# on_cmd = ['Denite']
# hook_add = '''
# autocmd FileType denite call s:denite_my_settings()
# nnoremap <silent> ;f <Cmd>Denite file/rec<CR>
# nnoremap <silent> ;h <Cmd>Denite help<CR>
# nnoremap <silent> ;g <Cmd>Denite grep<CR>
# function! s:denite_my_settings() abort
#   nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
#   nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
#   nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
#   nnoremap <silent><buffer><expr> q denite#do_map('quit')
#   nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
#   nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
# endfunction
# '''
# hook_post_source = '''
#   let s:preview_width_ratio = 0.5
#   let s:height_ratio = 0.7
#   call denite#custom#var('grep', 'command', ['rg', '--follow'])
#   call denite#custom#var('file/rec', 'command', ['rg', '--follow', '--files', '--glob', '!.git'])
#   call denite#custom#option('_', {
#     \ 'match_highlight': v:true,
#     \ 'prompt': '> ',
#     \ 'highlight_matched_char': 'None',
#     \ 'highlight_matched_range': 'Search',
#     \ 'auto_action': 'preview_bat',
#     \ 'preview_height': float2nr(&lines * s:height_ratio),
#     \ 'preview_width': float2nr(&columns * s:preview_width_ratio),
#     \ 'vertical_preview': v:true,
#     \})
# '''

# [[plugins]]
# repo = 'Shougo/neomru.vim'
# on_source = ['denite.nvim']
# hook_add = '''
# nnoremap <silent> ;m <Cmd>Denite file_mru<CR>
# '''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = ['Deol']
hook_add = '''
  nnoremap <silent> <C-o> <Cmd>Deol -split=otherwise -toggle -winheight=10<CR>
  tnoremap <Esc> <C-\><C-n>
'''

[[plugins]]
repo = 'tpope/vim-dadbod'
on_cmd = ['DB']

[[plugins]]
repo = 'kristijanhusak/vim-dadbod-ui'
on_cmd = ['DBUI']

[[plugins]]
repo = 'whatyouhide/vim-textobj-xmlattr'
on_ft = ['typescriptreact', 'javascriptreact', 'html', 'xml']

[[plugins]]
repo = "machakann/vim-swap"
on_map = ['<Plug>']
hook_add = '''
  let g:swap_no_default_key_mappings = 1
  map g< <Plug>(swap-prev)
  map g> <Plug>(swap-next)
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_map = ['<Plug>(Switch)']
hook_add = '''
  let g:switch_mapping = ''
  nmap gsf <Plug>(Switch)
'''

[[plugins]]
repo = 'arthurxavierx/vim-caser'
on_map = ['<Plug>']
hook_add = '''
  let g:caser_no_mappings = 1
  nmap gss <Plug>CaserSnakeCase
  nmap gsc <Plug>CaserCamelCase
  nmap gst <Plug>CaserMixedCase
'''
[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = ['HelpfulVersion']

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo = 'reireias/vim-cheatsheet'
on_cmd = ['Cheat']

[[plugins]]
repo = 'lambdalisue/vim-manpager'
on_cmd = ['MANPAGER']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = ['<Plug>(operator-sandwich', '<Plug>(textobj-sandwich']
hook_add = '''
  let sandwich_no_default_key_mappings=1
  let operator_sandwich_no_default_key_mappings=1
  nmap <silent> ys <Plug>(operator-sandwich-add)
  nmap <silent> ds <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  nmap <silent> cs <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']
hook_add = '''
vnoremap <silent> gu :Gina browse --exact --yank :<CR>
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'yarn install --frozen-lockfile --production'
on_ft = ['javascript', 'typescript', 'typescriptreact', 'javascriptreact', 'vue', 'css', 'scss', 'json', 'markdown']
hook_add = '''
  let g:prettier#autoformat = 0
  let g:prettier#quickfix_enabled = 0
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
hook_add = '''
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'mattn/sonictemplate-vim'
on_cmd = ['Template']

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
on_func = ['glyph_palette#apply']

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle']
hook_add = '''
  nnoremap <Leader>u <cmd>UndotreeToggle<CR>
'''

[[plugins]]
repo = 'hrsh7th/vim-searchx'
on_func = ['searchx#*']
hook_add ='''
  " Overwrite / and ?.
  nnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
  nnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
  xnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
  xnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
  cnoremap ; <Cmd>call searchx#select()<CR>
  " Move to next/prev match.
  nnoremap N <Cmd>call searchx#prev_dir()<CR>
  nnoremap n <Cmd>call searchx#next_dir()<CR>
  xnoremap N <Cmd>call searchx#prev_dir()<CR>
  xnoremap n <Cmd>call searchx#next_dir()<CR>

  " Clear highlights
  nnoremap <Esc><Esc> <Cmd>call searchx#clear()<CR>

  let g:searchx = {}

  " Auto jump if the recent input matches to any marker.
  let g:searchx.auto_accept = v:true

  " Marker characters.
  let g:searchx.markers = split('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '.\zs')

  " Convert search pattern.
  function g:searchx.convert(input) abort
    if a:input !~# '\k'
      return '\V' .. a:input
    endif
    return join(split(a:input, ' '), '.\{-}')
  endfunction
'''
